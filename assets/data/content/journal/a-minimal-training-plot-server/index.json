{"hash":"6f7ea7b7b7db75da07a89a880aedd8fe036650ea","data":{"post":{"title":"a minimal training plot server","date":"March 4 2017","content":"<p>Training a deep convolutional neural network (CNN) can be a lengthy process.\nWe usually want to monitor training loss and accuracy and validation loss and accuracy by plotting how these metrics\nchange as the number of minibatches grows on a graph.\n<a href=\"https://www.tensorflow.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tensorflow</a> provides <a href=\"https://www.tensorflow.org/get_started/summaries_and_tensorboard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tensorboard</a> for visualizing training progress.\nRecently I have been playing with <a href=\"http://pytorch.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PyTorch</a>, I really like its expresiveness and flexibility.\nHere's a strategy for visualizing training progress with\nany learning framework that doesn't provide Tensorboard-equivalent feature out of the box using Python 3.</p>\n<p>First of all as a good practice we output relevant metrics into a log file, the log file should be structured in a way\nthat is easy to parse and extract metrics. We will need to write a parser method, and a plot method to generate desired\ngraph(s). <a href=\"http://matplotlib.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">matplotlib</a>, <a href=\"http://seaborn.pydata.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">seaborn</a>, <a href=\"http://ggplot.yhathq.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ggplot</a> or <a href=\"http://bokeh.pydata.org/en/latest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bokeh</a> are useful python libraries for graphing.</p>\n<p>Then we can use <a href=\"https://docs.python.org/3/library/asyncio.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">asyncio</a> to create a background job to plot the metrics we want to visualize and use <a href=\"http://aiohttp.readthedocs.io/en/stable\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aiohttp</a> to create\na web server that displays and refreshes the graph(s) at a certain interval.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Using python 3.4</span>\n<span class=\"token keyword\">import</span> asyncio\n<span class=\"token keyword\">import</span> argparse\n<span class=\"token keyword\">from</span> aiohttp <span class=\"token keyword\">import</span> web\n\n\nGRAPH_LOCATION <span class=\"token operator\">=</span> <span class=\"token string\">\"static/train_plot.png\"</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>log_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># read log_file and extract metrics such as</span>\n    <span class=\"token comment\"># minibatch number, training loss, training accuracy,</span>\n    <span class=\"token comment\"># validation loss, validation accuracy</span>\n    <span class=\"token keyword\">return</span> metrics\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">plot</span><span class=\"token punctuation\">(</span>metrics<span class=\"token punctuation\">,</span> output<span class=\"token operator\">=</span>GRAPH_LOCATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># save output image to GRAPH_LOCATION</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">plot_loop</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Updating plot\"</span><span class=\"token punctuation\">)</span>\n    metrics <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>log_file<span class=\"token punctuation\">)</span>\n    plot<span class=\"token punctuation\">(</span>metrics<span class=\"token punctuation\">)</span>\n    loop<span class=\"token punctuation\">.</span>call_later<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>interval<span class=\"token punctuation\">,</span> plot_loop<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@asyncio<span class=\"token punctuation\">.</span>coroutine</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    interval <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'interval'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    resp <span class=\"token operator\">=</span> web<span class=\"token punctuation\">.</span>StreamResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n                                reason<span class=\"token operator\">=</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">,</span>\n                                headers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> resp<span class=\"token punctuation\">.</span>prepare<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n    html_str <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n        &lt;html>\n            &lt;head>\n                &lt;meta http-equiv='refresh' content='{}'>\n            &lt;/head>\n            &lt;body>\n                &lt;img src='{}' width='100%'/>\n            &lt;/body>\n        &lt;/html>\n    \"\"\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">,</span> GRAPH_LOCATION<span class=\"token punctuation\">)</span>\n    resp<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>html_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> resp<span class=\"token punctuation\">.</span>drain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> resp\n\n\n<span class=\"token decorator annotation punctuation\">@asyncio<span class=\"token punctuation\">.</span>coroutine</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">build_server</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> web<span class=\"token punctuation\">.</span>Application<span class=\"token punctuation\">(</span>loop<span class=\"token operator\">=</span>loop<span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span>add_route<span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/plot\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span>add_static<span class=\"token punctuation\">(</span><span class=\"token string\">'/static'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"static\"</span><span class=\"token punctuation\">)</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> loop<span class=\"token punctuation\">.</span>create_server<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>make_handler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ret\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    parser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">'Training graphs server'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'log_file'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'path to train log file'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--interval'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-i'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'plot interval'</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--port'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-p'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">7777</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'server port'</span><span class=\"token punctuation\">)</span>\n    args <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    loop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    loop<span class=\"token punctuation\">.</span>call_soon<span class=\"token punctuation\">(</span>plot_loop<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">)</span>\n    loop<span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>build_server<span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">,</span> <span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        loop<span class=\"token punctuation\">.</span>run_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server shutting down!\"</span><span class=\"token punctuation\">)</span>\n        loop<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>This snippet can also be found <a href=\"https://gist.github.com/ivylee/f1b00ce54f948e627605598ccf3cf4b9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n"}},"context":{}}