{"hash":"c035355dcf2811990fb7d6212a2e49c58001871e","data":{"post":{"title":"a minimal training plot server","date":"March 4 2017","content":"<p>Training a deep convolutional neural network (CNN) can be a lengthy process.\nWe usually want to monitor training loss and accuracy and validation loss and accuracy by plotting how these metrics\nchange as the number of minibatches grows on a graph.\n<a href=\"https://www.tensorflow.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tensorflow</a> provides <a href=\"https://www.tensorflow.org/get_started/summaries_and_tensorboard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tensorboard</a> for visualizing training progress.\nRecently I have been playing with <a href=\"http://pytorch.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PyTorch</a>, I really like its expresiveness and flexibility.\nHere's a strategy for visualizing training progress with\nany learning framework that doesn't provide Tensorboard-equivalent feature out of the box using Python 3.</p>\n<p>First of all as a good practice we output relevant metrics into a log file, the log file should be structured in a way\nthat is easy to parse and extract metrics. We will need to write a parser method, and a plot method to generate desired\ngraph(s). <a href=\"http://matplotlib.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">matplotlib</a>, <a href=\"http://seaborn.pydata.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">seaborn</a>, <a href=\"http://ggplot.yhathq.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ggplot</a> or <a href=\"http://bokeh.pydata.org/en/latest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bokeh</a> are useful python libraries for graphing.</p>\n<p>Then we can use <a href=\"https://docs.python.org/3/library/asyncio.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">asyncio</a> to create a background job to plot the metrics we want to visualize and use <a href=\"http://aiohttp.readthedocs.io/en/stable\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aiohttp</a> to create\na web server that displays and refreshes the graph(s) at a certain interval.</p>\n<pre class=\"language-text\"><code class=\"language-text\"># Using python 3.4\nimport asyncio\nimport argparse\nfrom aiohttp import web\n\n\nGRAPH_LOCATION = &quot;static/train_plot.png&quot;\n\n\ndef parser(log_file):\n    # read log_file and extract metrics such as\n    # minibatch number, training loss, training accuracy,\n    # validation loss, validation accuracy\n    return metrics\n\n\ndef plot(metrics, output=GRAPH_LOCATION):\n    # save output image to GRAPH_LOCATION\n\n\ndef plot_loop(args, loop):\n    print(&quot;Updating plot&quot;)\n    metrics = parser(args.log_file)\n    plot(metrics)\n    loop.call_later(args.interval, plot_loop, args, loop)\n\n\n@asyncio.coroutine\ndef handler(request):\n    interval = int(request.GET.get(&#39;interval&#39;, 30))\n    resp = web.StreamResponse(status=200,\n                              reason=&#39;OK&#39;,\n                              headers={&#39;Content-Type&#39;: &#39;text/html&#39;})\n\n    yield from resp.prepare(request)\n\n    html_str = &quot;&quot;&quot;\n        &lt;html&gt;\n            &lt;head&gt;\n                &lt;meta http-equiv=&#39;refresh&#39; content=&#39;{}&#39;&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;img src=&#39;{}&#39; width=&#39;100%&#39;/&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n    &quot;&quot;&quot;.format(interval, GRAPH_LOCATION)\n    resp.write(str.encode(html_str))\n\n    yield from resp.drain()\n    return resp\n\n\n@asyncio.coroutine\ndef build_server(loop, address, port):\n    app = web.Application(loop=loop)\n    app.router.add_route(&#39;GET&#39;, &quot;/plot&quot;, handler)\n    app.router.add_static(&#39;/static&#39;, &quot;static&quot;)\n    ret = yield from loop.create_server(app.make_handler(), address, port)\n    return ret\n\n\nif __name__ == &quot;__main__&quot;:\n    parser = argparse.ArgumentParser(description=&#39;Training graphs server&#39;)\n    parser.add_argument(&#39;log_file&#39;,\n                        help=&#39;path to train log file&#39;)\n    parser.add_argument(&#39;--interval&#39;, &#39;-i&#39;, default=30,\n                        help=&#39;plot interval&#39;)\n    parser.add_argument(&#39;--port&#39;, &#39;-p&#39;, default=7777,\n                        help=&#39;server port&#39;)\n    args = parser.parse_args()\n\n    loop = asyncio.get_event_loop()\n    loop.call_soon(plot_loop, args, loop)\n    loop.run_until_complete(build_server(loop, &#39;0.0.0.0&#39;, args.port))\n    try:\n        loop.run_forever()\n    except KeyboardInterrupt:\n        print(&quot;Server shutting down!&quot;)\n        loop.close()</code></pre>\n<p>This snippet can also be found <a href=\"https://gist.github.com/ivylee/f1b00ce54f948e627605598ccf3cf4b9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n"}},"context":{}}