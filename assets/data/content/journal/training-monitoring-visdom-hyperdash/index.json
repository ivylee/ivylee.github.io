{"hash":"ffd7038b431585c48d67e3d6878e9f98975f1e8e","data":{"post":{"title":"training monitoring with Visdom and Hyperdash","date":"December 10 2017","content":"<p>For the past few months, I have enjoyed using <a href=\"https://github.com/facebookresearch/visdom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visdom</a> and <a href=\"https://hyperdash.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hyperdash</a> to monitor training processes.</p>\n<h3 id=\"visdom\"><a href=\"#visdom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Visdom</h3>\n<p>Visom is a Python library developed by Facebook Research. Similar to <a href=\"https://www.tensorflow.org/get_started/summaries_and_tensorboard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tensorboard</a>,\nit provides a UI server (using React) through which user can create scatter plots, histograms, visualize images and text.</p>\n<p>I have written a small snippet for creating and updating a scatter plot,\nwhich can be used for visualizing training and validation loss and accuracy.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># pip install visdom numpy</span>\n<span class=\"token comment\"># visualize.py</span>\n\n<span class=\"token keyword\">import</span> numpy\n<span class=\"token keyword\">from</span> visdom <span class=\"token keyword\">import</span> Visdom\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Plot</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>viz <span class=\"token operator\">=</span> Visdom<span class=\"token punctuation\">(</span>port<span class=\"token operator\">=</span>port<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>windows <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        self<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">register_scatterplot</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> xlabel<span class=\"token punctuation\">,</span> ylabel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        win <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>viz<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>\n            X<span class=\"token operator\">=</span>numpy<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            opts<span class=\"token operator\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> markersize<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> xlabel<span class=\"token operator\">=</span>xlabel<span class=\"token punctuation\">,</span> ylabel<span class=\"token operator\">=</span>ylabel<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>windows<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> win\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update_scatterplot</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>viz<span class=\"token punctuation\">.</span>updateTrace<span class=\"token punctuation\">(</span>\n            X<span class=\"token operator\">=</span>numpy<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Y<span class=\"token operator\">=</span>numpy<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            win<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>windows<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span></code></pre>\n<p>In my training script, I can initialize and update the plots.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># train.py</span>\n<span class=\"token keyword\">import</span> visualize\n\nplot <span class=\"token operator\">=</span> visualize<span class=\"token punctuation\">.</span>Plot<span class=\"token punctuation\">(</span><span class=\"token string\">\"Model A\"</span><span class=\"token punctuation\">)</span>\nplot<span class=\"token punctuation\">.</span>register_scatterplot<span class=\"token punctuation\">(</span><span class=\"token string\">\"Loss\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Epoch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Loss\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ... compute average loss over training data</span>\n    plot<span class=\"token punctuation\">.</span>update_scatterplot<span class=\"token punctuation\">(</span><span class=\"token string\">\"Loss\"</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">)</span></code></pre>\n<p>Before running the training script, we need to start the web server, so that after training starts,\nwe can go to <code>localhost:8080</code> in the browser to see the plots.</p>\n<pre class=\"language-text\"><code class=\"language-text\">python -m visdom.server -p 8080</code></pre>\n<p>The above snippets can also be found <a href=\"https://gist.github.com/ivylee/b2f47d1ad787d7f7079c596bb0ac9c0f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.\n<a href=\"https://github.com/pytorch/tnt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PyTorchNet</a> library provides more <a href=\"https://github.com/pytorch/tnt/blob/master/torchnet/logger/visdomlogger.py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">loggers</a> for plots, images, and text, it can be very handy if you're a PyTorch user.</p>\n<h3 id=\"hyperdash\"><a href=\"#hyperdash\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hyperdash</h3>\n<p>Visdom is great for visualizing plots and images, however connection to a remote server isn't always available.\nHyperdash can stream training logs from a process on a remote server directly to my phone.\nI can simply open the mobile app to know if the training process died, or loss is no longer decreasing.\nThe set up is quite simple, all necessary steps are documented in the <a href=\"https://hyperdash.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">homepage</a>.\nOne caveat is that it does not work well with <code>tqdm</code> (see <a href=\"https://github.com/hyperdashio/hyperdash-sdk-py/issues/63\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">issue 63</a>), simply disable <code>tqdm</code> in the training script.</p>\n"}},"context":{}}